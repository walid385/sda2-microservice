// <auto-generated />
using System;
using CustomerService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CustomerService.Migrations
{
    [DbContext(typeof(CustomerContext))]
    [Migration("20241020100547_CustomerCreateDto")]
    partial class CustomerCreateDto
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.20");

            modelBuilder.Entity("CustomerService.Models.CartInProgress", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CartId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CartsInProgress");
                });

            modelBuilder.Entity("CustomerService.Models.CustomerInfo", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Rewards")
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ZipCode")
                        .HasColumnType("INTEGER");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CustomerService.Models.GiftCard", b =>
                {
                    b.Property<int>("GiftCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Balance")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.HasKey("GiftCardId");

                    b.HasIndex("CustomerId");

                    b.ToTable("GiftCards");
                });

            modelBuilder.Entity("CustomerService.Models.ItemList", b =>
                {
                    b.Property<int>("ItemListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CartId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("ItemListId");

                    b.HasIndex("CartId");

                    b.ToTable("ItemLists");
                });

            modelBuilder.Entity("CustomerService.Models.ReturnTable", b =>
                {
                    b.Property<int>("ReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("TEXT");

                    b.HasKey("ReturnId");

                    b.HasIndex("CustomerId");

                    b.ToTable("ReturnTables");
                });

            modelBuilder.Entity("CustomerService.Models.CartInProgress", b =>
                {
                    b.HasOne("CustomerService.Models.CustomerInfo", "Customer")
                        .WithMany("CartsInProgress")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CustomerService.Models.GiftCard", b =>
                {
                    b.HasOne("CustomerService.Models.CustomerInfo", "Customer")
                        .WithMany("GiftCards")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CustomerService.Models.ItemList", b =>
                {
                    b.HasOne("CustomerService.Models.CartInProgress", "Cart")
                        .WithMany("ItemLists")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("CustomerService.Models.ReturnTable", b =>
                {
                    b.HasOne("CustomerService.Models.CustomerInfo", "Customer")
                        .WithMany("Returns")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CustomerService.Models.CartInProgress", b =>
                {
                    b.Navigation("ItemLists");
                });

            modelBuilder.Entity("CustomerService.Models.CustomerInfo", b =>
                {
                    b.Navigation("CartsInProgress");

                    b.Navigation("GiftCards");

                    b.Navigation("Returns");
                });
#pragma warning restore 612, 618
        }
    }
}
